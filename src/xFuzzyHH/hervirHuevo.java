package xFuzzyHH;

//++++++++++++++++++++++++++++++++++++++++++++++++++++++//
//                                                      //
// Class:  hervirHuevo                           //
//                                                      //
// Author: Automatically generated by Xfuzzy            //
//                                                      //
// Description: Fuzzy inference engine "hervirHuevo"       //
//                                                      //
//++++++++++++++++++++++++++++++++++++++++++++++++++++++//



public class hervirHuevo implements FuzzyInferenceEngine {

 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//
 //  Rulebase RL_global  //
 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//

 private MembershipFunction[] RL_global(MembershipFunction X1, MembershipFunction X2) {
  double _rl;
  double _input[] = new double[2];
  if(X1 instanceof FuzzySingleton)
   _input[0] = ((FuzzySingleton) X1).getValue();
  if(X2 instanceof FuzzySingleton)
   _input[1] = ((FuzzySingleton) X2).getValue();
  OP_hervirHuevo_COA _op = new OP_hervirHuevo_COA();
  OutputMembershipFunction Y = new OutputMembershipFunction();
  Y.set(9,_op,_input);
  TP_hervirHuevo_Tamanho _t_X1 = new TP_hervirHuevo_Tamanho();
  TP_hervirHuevo_Tipo _t_X2 = new TP_hervirHuevo_Tipo();
  TP_hervirHuevo_Tiempo _t_Y = new TP_hervirHuevo_Tiempo();
  int _i_Y=0;
  _rl = _op.and(_t_X1.S1.isEqual(X1),_t_X2.blando.isEqual(X2));
  Y.set(_i_Y,_rl, _t_Y.S2); _i_Y++;
  _rl = _op.and(_t_X1.S1.isEqual(X1),_t_X2.medio.isEqual(X2));
  Y.set(_i_Y,_rl, _t_Y.S1); _i_Y++;
  _rl = _op.and(_t_X1.S1.isEqual(X1),_t_X2.duro.isEqual(X2));
  Y.set(_i_Y,_rl, _t_Y.CE); _i_Y++;
  _rl = _op.and(_t_X1.CE.isEqual(X1),_t_X2.blando.isEqual(X2));
  Y.set(_i_Y,_rl, _t_Y.S1); _i_Y++;
  _rl = _op.and(_t_X1.CE.isEqual(X1),_t_X2.medio.isEqual(X2));
  Y.set(_i_Y,_rl, _t_Y.CE); _i_Y++;
  _rl = _op.and(_t_X1.CE.isEqual(X1),_t_X2.duro.isEqual(X2));
  Y.set(_i_Y,_rl, _t_Y.B1); _i_Y++;
  _rl = _op.and(_t_X1.B1.isEqual(X1),_t_X2.blando.isEqual(X2));
  Y.set(_i_Y,_rl, _t_Y.CE); _i_Y++;
  _rl = _op.and(_t_X1.B1.isEqual(X1),_t_X2.medio.isEqual(X2));
  Y.set(_i_Y,_rl, _t_Y.B1); _i_Y++;
  _rl = _op.and(_t_X1.B1.isEqual(X1),_t_X2.duro.isEqual(X2));
  Y.set(_i_Y,_rl, _t_Y.B2); _i_Y++;
  MembershipFunction[] _output = new MembershipFunction[1];
  _output[0] = new FuzzySingleton(Y.defuzzify());
  return _output;
 }

 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//
 //               Fuzzy Inference Engine                //
 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//

 public double[] crispInference(double[] _input) {
  MembershipFunction X2 = new FuzzySingleton(_input[0]);
  MembershipFunction X1 = new FuzzySingleton(_input[1]);
  MembershipFunction Y;
  MembershipFunction[] _call;
  _call = RL_global(X1,X2); Y=_call[0];
  double _output[] = new double[1];
  if(Y instanceof FuzzySingleton)
   _output[0] = ((FuzzySingleton) Y).getValue();
  else _output[0] = ((OutputMembershipFunction) Y).defuzzify();
  return _output;
 }

 public double[] crispInference(MembershipFunction[] _input) {
  MembershipFunction X2 = _input[0];
  MembershipFunction X1 = _input[1];
  MembershipFunction Y;
  MembershipFunction[] _call;
  _call = RL_global(X1,X2); Y=_call[0];
  double _output[] = new double[1];
  if(Y instanceof FuzzySingleton)
   _output[0] = ((FuzzySingleton) Y).getValue();
  else _output[0] = ((OutputMembershipFunction) Y).defuzzify();
  return _output;
 }

 public MembershipFunction[] fuzzyInference(double[] _input) {
  MembershipFunction X2 = new FuzzySingleton(_input[0]);
  MembershipFunction X1 = new FuzzySingleton(_input[1]);
  MembershipFunction Y;
  MembershipFunction[] _call;
  _call = RL_global(X1,X2); Y=_call[0];
  MembershipFunction _output[] = new MembershipFunction[1];
  _output[0] = Y;
  return _output;
 }

 public MembershipFunction[] fuzzyInference(MembershipFunction[] _input) {
  MembershipFunction X2 = _input[0];
  MembershipFunction X1 = _input[1];
  MembershipFunction Y;
  MembershipFunction[] _call;
  _call = RL_global(X1,X2); Y=_call[0];
  MembershipFunction _output[] = new MembershipFunction[1];
  _output[0] = Y;
  return _output;
 }

}

